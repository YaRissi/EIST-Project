plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
}

group = 'de.tum.insertteamnamehere'
version = '1.0.0'
sourceCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven {url 'https://jitpack.io'}

}
configurations {
    serverImplementation.extendsFrom(implementation)
    clientImplementation.extendsFrom(implementation)
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    serverImplementation 'org.springframework.boot:spring-boot-starter-web'

    clientImplementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'com.github.cliftonlabs:json-simple:4.0.1'
    implementation "org.loadui:testFx:3.1.2"
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.apache.commons:commons-lang3:3.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'

    implementation('org.springframework.boot:spring-boot-starter-mail')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation('com.sothawo:mapjfx:3.1.0')
    //implementation('com.github.SirGoose3432:javafx-calendar:master-SNAPSHOT')

}

javafx {
    version = '17.0.2'
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.media' , 'javafx.web' ]
    configuration = 'clientImplementation'
}

sourceSets {

    common {
        java {
            srcDir 'src/common/java'
        }

    }
    server {
        java {
            srcDir 'src/reservationsystem/server/java'
        }
        resources {
            srcDir 'src/reservationsystem/server/resources'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output

    }
    client {
        java {
            srcDir 'src/client/java'
        }
        resources {
            srcDir 'src/client/resources'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
        compileClasspath += server.output
        runtimeClasspath += server.output

    }


    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            'src/test/resources'
        }
        compileClasspath += common.output
        runtimeClasspath += common.output
        compileClasspath += client.output
        runtimeClasspath += client.output
        compileClasspath += server.output
        runtimeClasspath += server.output

    }

}

test {
    defaultCharacterEncoding = 'UTF-8'
    useJUnitPlatform()
}


processServerResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processClientResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

